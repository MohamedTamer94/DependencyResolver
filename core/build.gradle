/*
 *  Copyright (c) 2021 Mohamed Tamer
 *   Permission is hereby granted, free of charge, to any person obtaining
 *   a copy of this software and associated documentation files (the
 *   "Software"), to deal in the Software without restriction, including
 *   without limitation the rights to use, copy, modify, merge, publish,
 *   distribute, sublicense, and/or sell copies of the Software, and to
 *   permit persons to whom the Software is furnished to do so, subject to
 *   the following conditions:
 *
 *   The above copyright notice and this permission notice shall be
 *   included in all copies or substantial portions of the Software.
 *
 *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *   LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *   OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *   WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

plugins {
    id 'java'
}

group 'io.mohamed.resolver'
version '0.3-beta'
description = 'The core module to resolve dependencies for the given artifact.'

repositories {
    mavenCentral()
    flatDir {
        dirs '../libs'
    }
    maven { url 'https://repo.gradle.org/gradle/libs-releases-local/' }
}

dependencies {
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.jsoup:jsoup:1.14.2'
    implementation 'org.eclipse.jgit:org.eclipse.jgit:5.12.0.202106070339-r'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha5'
    implementation 'org.slf4j:slf4j-simple:2.0.0-alpha5'
    implementation 'com.google.guava:guava:30.1.1-jre'
    implementation name: 'common-24.3.0'
    implementation name: 'sdk-common-24.3.0'
    implementation name: 'manifest-merger-25.3.0'
    implementation name: 'layoutlib-api-24.3.0'
    implementation gradleApi()
}

task generateSources {
    def outputDir = file("$buildDir/../src/main/java/io/mohamed/resolver/core/version")
    outputs.dir outputDir
    doFirst {
        outputDir.exists() || outputDir.mkdirs()
        def srcFile = new File(outputDir, "Version.java")
        srcFile.write(
                """// AUTOGENERATED FILE - DON'T EDIT
package io.mohamed.resolver.core.version;

public class Version {
  public static final String VERSION = "$project.version";
}
""")
    }
}
compileJava.dependsOn generateSources
compileJava.source generateSources.outputs.files, sourceSets.main.java